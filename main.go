package main

import (
	"database/sql"
	"encoding/json"
	_ "encoding/json"
	"fmt"
	"gopkg.in/telebot.v3"
	"log"
	_ "modernc.org/sqlite"
	"os"
	"strconv"
	"strings"
	"time"
)

const (
	SupportGroupLink = "https://t.me/+cZ8_qXqR_uI5Zjcy"
	SupportGroupID   = -1002574381342
)

type Ticket struct {
	ID        int
	UserID    int64
	UserName  string
	Title     string
	Message   string
	CreatedAt string
	Status    string
}

var db *sql.DB
var bot *telebot.Bot

func main() {
	// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
	if err := initDB(); err != nil {
		log.Panicf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %v", err)
	}
	defer db.Close()

	// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("–£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	var err error
	bot, err = telebot.NewBot(pref)
	if err != nil {
		log.Panic(err)
	}

	log.Printf("–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ @%s –∑–∞–ø—É—â–µ–Ω", bot.Me.Username)

	// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã
	if err := verifyGroupAccess(); err != nil {
		log.Panicf("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ: %v", err)
	}

	// 4. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
	bot.Handle("/start", handleStart)
	bot.Handle("/help", handleHelp)
	bot.Handle("/mytickets", handleMyTickets)
	bot.Handle(telebot.OnText, handleTextMessage)
	bot.Handle(telebot.OnCallback, handleCallback)

	// 5. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
	log.Println("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
	bot.Start()
}

func initDB() error {
	var err error
	db, err = sql.Open("sqlite", "file:support.db?cache=shared")
	if err != nil {
		return err
	}

	_, err = db.Exec(`
	CREATE TABLE IF NOT EXISTS tickets (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER NOT NULL,
		user_name TEXT NOT NULL,
		title TEXT NOT NULL,
		message TEXT NOT NULL,
		created_at TEXT NOT NULL,
		status TEXT NOT NULL DEFAULT 'open'
	)`)
	return err
}

func verifyGroupAccess() error {
	// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
	_, err := bot.ChatByID(SupportGroupID)
	return err
}

func handleStart(c telebot.Context) error {
	// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π Start
	markup := &telebot.ReplyMarkup{ResizeKeyboard: true}
	btnStart := markup.Text("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
	markup.Reply(markup.Row(btnStart))

	return c.Send(
		"üõ†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"+
			"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ, –∏ —è —Å–æ–∑–¥–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–µ.\n\n"+
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
			"/mytickets - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π\n"+
			"/help - —Å–ø—Ä–∞–≤–∫–∞",
		&telebot.SendOptions{ReplyMarkup: markup},
	)
}

func handleHelp(c telebot.Context) error {
	return c.Send(
		"‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n" +
			"1. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ\n" +
			"2. –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n" +
			"3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å\n\n" +
			"–ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: " + SupportGroupLink,
	)
}

func handleMyTickets(c telebot.Context) error {
	tickets, err := getUserTickets(c.Sender().ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤: %v", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π")
	}

	if len(tickets) == 0 {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
	}

	var msg strings.Builder
	msg.WriteString("üìã –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n")
	for _, t := range tickets {
		msg.WriteString(fmt.Sprintf(
			"#%d - %s\n–°—Ç–∞—Ç—É—Å: %s\n–î–∞—Ç–∞: %s\n\n",
			t.ID, t.Title, t.Status, t.CreatedAt))
	}

	return c.Send(msg.String())
}

func handleTextMessage(c telebot.Context) error {
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
	if c.Message().Text[0] == '/' {
		return nil
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
	ticket := Ticket{
		UserID:    c.Sender().ID,
		UserName:  c.Sender().Username,
		Title:     fmt.Sprintf("–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç %s", c.Sender().FirstName),
		Message:   c.Message().Text,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Status:    "open",
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	id, err := createTicket(ticket)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: %v", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
	if err := sendToSupportGroup(id, ticket, c.Message()); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: %v", err)
		return c.Send(fmt.Sprintf(
			"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"+
				"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n%s",
			SupportGroupLink))
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	return c.Send(fmt.Sprintf(
		"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #%d —Å–æ–∑–¥–∞–Ω–æ!\n\n"+
			"–¢–µ–º–∞: %s\n"+
			"–°—Ç–∞—Ç—É—Å: %s\n\n"+
			"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n%s",
		id, ticket.Title, ticket.Status, SupportGroupLink))
}

func sendToSupportGroup(ticketID int64, t Ticket, origMsg *telebot.Message) error {
	text := fmt.Sprintf(
		"üö® –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #%d\n\n"+
			"üë§ –û—Ç: %s %s (@%s)\n"+
			"üÜî UserID: %d\n\n"+ // –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞
			"üìå –¢–µ–º–∞: %s\n\n"+
			"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n%s\n\n"+
			"üïí –î–∞—Ç–∞: %s\n"+
			"üîó –°—Ç–∞—Ç—É—Å: %s",
		ticketID,
		origMsg.Sender.FirstName,
		origMsg.Sender.LastName,
		t.UserName,
		t.UserID, // –î–æ–±–∞–≤–ª–µ–Ω–æ
		t.Title,
		t.Message,
		t.CreatedAt,
		t.Status,
	)

	// 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ–º—É (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ - —Ñ–æ—Ä—É–º)
	topicName := fmt.Sprintf("–û–±—Ä–∞—â–µ–Ω–∏–µ #%d: %s", ticketID, t.Title)
	threadID, err := createForumTopic(topicName)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É: %v. –ü—Ä–æ–±—É—é –±–µ–∑ —Ç–µ–º—ã", err)
		threadID = 0 // 0 –æ–∑–Ω–∞—á–∞–µ—Ç "–±–µ–∑ —Ç–µ–º—ã"
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö
	markup := &telebot.ReplyMarkup{}
	markup.Inline(
		markup.Row(
			markup.Data("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", "take_btn", strconv.FormatInt(ticketID, 10)),
			markup.Data("‚ùå –ó–∞–∫—Ä—ã—Ç–æ", "close_btn", strconv.FormatInt(ticketID, 10)),
		),
	)

	// 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = bot.Send(
		telebot.ChatID(SupportGroupID),
		text,
		&telebot.SendOptions{
			ReplyMarkup: markup,
			ThreadID:    threadID, // 0 - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ —Ñ–æ—Ä—É–º
		},
	)

	return err
}

func createForumTopic(name string) (int, error) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Raw API Telegram
	params := map[string]interface{}{
		"chat_id": SupportGroupID,
		"name":    name,
	}

	var result struct {
		Result struct {
			MessageThreadID int `json:"message_thread_id"`
		} `json:"result"`
	}

	resp, err := bot.Raw("createForumTopic", params)
	if err != nil {
		return 0, err
	}

	if err := json.Unmarshal(resp, &result); err != nil {
		return 0, err
	}

	return result.Result.MessageThreadID, nil
}

func createTicket(t Ticket) (int64, error) {
	res, err := db.Exec(
		`INSERT INTO tickets (user_id, user_name, title, message, created_at, status)
		VALUES (?, ?, ?, ?, ?, ?)`,
		t.UserID, t.UserName, t.Title, t.Message, t.CreatedAt, t.Status,
	)
	if err != nil {
		return 0, err
	}
	return res.LastInsertId()
}

func getUserTickets(userID int64) ([]Ticket, error) {
	rows, err := db.Query(
		`SELECT id, title, status, created_at FROM tickets
		WHERE user_id = ? ORDER BY created_at DESC`,
		userID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var tickets []Ticket
	for rows.Next() {
		var t Ticket
		err := rows.Scan(&t.ID, &t.Title, &t.Status, &t.CreatedAt)
		if err != nil {
			return nil, err
		}
		tickets = append(tickets, t)
	}
	return tickets, nil
}

func updateTicketStatus(ticketID int64, status string) error {
	_, err := db.Exec(
		`UPDATE tickets SET status = ? WHERE id = ?`,
		status, ticketID,
	)
	return err
}

func getTicket(ticketID int64) (*Ticket, error) {
	row := db.QueryRow(
		`SELECT id, user_id, user_name, title, message, created_at, status 
         FROM tickets WHERE id = ?`,
		ticketID,
	)

	var t Ticket
	err := row.Scan(&t.ID, &t.UserID, &t.UserName, &t.Title, &t.Message, &t.CreatedAt, &t.Status)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func handleCallback(c telebot.Context) error {
	cb := c.Callback()
	if cb == nil {
		return nil
	}

	log.Printf("Callback received - Unique: '%s', Data: '%s'", cb.Unique, cb.Data)
	log.Printf("Full callback struct: %+v", cb)

	// –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
	cleanData := strings.TrimFunc(cb.Data, func(r rune) bool {
		return r < 32 || r == 127
	})

	// –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —á–∞—Å—Ç–∏
	parts := strings.Split(cleanData, "|")
	if len(parts) < 2 { // –ò–∑–º–µ–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –±–æ–ª—å—à–µ–π –≥–∏–±–∫–æ—Å—Ç–∏
		log.Printf("Invalid callback data format: %s", cleanData)
		return c.Respond(&telebot.CallbackResponse{
			Text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
		})
	}

	action := parts[0]
	ticketIDStr := parts[len(parts)-1] // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –∫–∞–∫ ticketID

	ticketID, err := strconv.ParseInt(ticketIDStr, 10, 64)
	if err != nil {
		log.Printf("Failed to parse ticket ID: %v", err)
		return c.Respond(&telebot.CallbackResponse{
			Text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
		})
	}

	var status, userMsg string
	var newMarkup *telebot.ReplyMarkup

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
	switch action {
	case "take_btn":
		status = "in_progress"
		userMsg = fmt.Sprintf("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #%d –ø—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É!", ticketID)

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫—Ä—ã—Ç—å"
		newMarkup = &telebot.ReplyMarkup{}
		newMarkup.Inline(
			newMarkup.Row(
				newMarkup.Data("‚ùå –ó–∞–∫—Ä—ã—Ç–æ", "close_btn", fmt.Sprintf("close_btn|%d", ticketID)), // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
			),
		)

	case "close_btn":
		status = "closed"
		userMsg = fmt.Sprintf("‚úîÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ #%d –∑–∞–∫—Ä—ã—Ç–æ. –°–ø–∞—Å–∏–±–æ!", ticketID)
		newMarkup = &telebot.ReplyMarkup{} // –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
	default:
		log.Printf("Unknown callback action: %s", action)
		return c.Respond()
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
	if err := updateTicketStatus(ticketID, status); err != nil {
		log.Printf("Failed to update ticket status: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if ticket, err := getTicket(ticketID); err == nil {
		if _, err := bot.Send(telebot.ChatID(ticket.UserID), userMsg); err != nil {
			log.Printf("Failed to notify user: %v", err)
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
	if cb.Message != nil {
		newText := strings.Replace(cb.Message.Text, "üîó –°—Ç–∞—Ç—É—Å: open", "üîó –°—Ç–∞—Ç—É—Å: "+status, 1)
		if _, err := bot.Edit(cb.Message, newText); err != nil {
			log.Printf("Failed to update message text: %v", err)
		}

		if _, err := bot.EditReplyMarkup(cb.Message, newMarkup); err != nil {
			log.Printf("Failed to update buttons: %v", err)
		}
	}

	return c.Respond()
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
func createTicketButtons(ticketID int64) *telebot.ReplyMarkup {
	markup := &telebot.ReplyMarkup{}
	markup.Inline(
		markup.Row(
			markup.Data("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", "take_ticket", strconv.FormatInt(ticketID, 10)),
			markup.Data("‚ùå –ó–∞–∫—Ä—ã—Ç–æ", "close_ticket", strconv.FormatInt(ticketID, 10)),
		),
	)
	return markup
}

package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	"gopkg.in/telebot.v3"
	_ "modernc.org/sqlite"
)

const (
	SupportGroupLink = "https://t.me/+d9t6S8-8iy1hOTli"
	SupportGroupID   = -1002574381342
	MaxMessagesLimit = 4000
)

type Ticket struct {
	ID        int64
	UserID    int64
	UserName  string
	Title     string
	Message   string
	CreatedAt string
	Status    string
	ThreadID  int
}

type TicketMessage struct {
	ID        int64
	TicketID  int64
	MessageID int
	UserID    int64
	UserName  string
	Text      string
	Date      string
	IsSupport bool
}

var (
	db  *sql.DB
	bot *telebot.Bot
)

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
	log.Println("=== –ó–ê–ü–£–°–ö –ë–û–¢–ê –ü–û–î–î–ï–†–ñ–ö–ò ===")

	if err := initDB(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %v", err)
	}
	defer db.Close()

	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("–£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	pref := telebot.Settings{
		Token:   token,
		Poller:  &telebot.LongPoller{Timeout: 10 * time.Second},
		OnError: func(err error, c telebot.Context) { log.Printf("–û—à–∏–±–∫–∞: %v", err) },
		Verbose: true,
	}

	var err error
	bot, err = telebot.NewBot(pref)
	if err != nil {
		log.Panic(err)
	}

	log.Printf("–ë–æ—Ç @%s –∑–∞–ø—É—â–µ–Ω", bot.Me.Username)

	if err := verifyGroupAccess(); err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: %v", err)
	}

	registerHandlers()

	log.Println("=== –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï ===")
	bot.Start()
}

func initDB() error {
	var err error
	db, err = sql.Open("sqlite", "file:support.db?cache=shared")
	if err != nil {
		return err
	}

	_, err = db.Exec(`
	CREATE TABLE IF NOT EXISTS tickets (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER NOT NULL,
		user_name TEXT NOT NULL,
		title TEXT NOT NULL,
		message TEXT NOT NULL,
		created_at TEXT NOT NULL,
		status TEXT NOT NULL DEFAULT 'open',
		thread_id INTEGER DEFAULT 0
	);
	CREATE TABLE IF NOT EXISTS ticket_messages (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		ticket_id INTEGER NOT NULL,
		message_id INTEGER NOT NULL,
		user_id INTEGER NOT NULL,
		user_name TEXT NOT NULL,
		text TEXT NOT NULL,
		date TEXT NOT NULL,
		is_support BOOLEAN NOT NULL DEFAULT FALSE,
		FOREIGN KEY(ticket_id) REFERENCES tickets(id)
	);
	CREATE INDEX IF NOT EXISTS idx_ticket_messages_ticket_id ON ticket_messages(ticket_id);
	`)
	if err != nil {
		return err
	}

	go checkMessagesLimit()
	return nil
}

func checkMessagesLimit() {
	var count int
	err := db.QueryRow("SELECT COUNT(*) FROM ticket_messages").Scan(&count)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
		return
	}

	if count > MaxMessagesLimit {
		excess := count - MaxMessagesLimit
		_, err = db.Exec(`
			DELETE FROM ticket_messages 
			WHERE id IN (
				SELECT id FROM ticket_messages 
				ORDER BY date ASC 
				LIMIT ?
			)`, excess)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
		}
	}
}

func verifyGroupAccess() error {
	chat, err := bot.ChatByID(SupportGroupID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: %v", err)
	}

	member, err := bot.ChatMemberOf(chat, bot.Me)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: %v", err)
	}

	if !member.CanManageTopics {
		return fmt.Errorf("–±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–º–∞–º–∏")
	}

	return nil
}

func registerHandlers() {
	bot.Handle("/start", handleStart)
	bot.Handle("/help", handleHelp)
	bot.Handle("/mytickets", handleMyTickets)
	bot.Handle("/history", handleHistoryCommand)

	bot.Handle(&telebot.Btn{Text: "–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"}, handleNewTicketButton)
	bot.Handle(&telebot.Btn{Text: "–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"}, handleCloseTicketButton)
	bot.Handle(&telebot.Btn{Text: "–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"}, handleMyTicketsButton)

	bot.Handle(telebot.OnCallback, handleCallbacks)
	bot.Handle(telebot.OnText, handleTextMessages)
}

func showUserMenu(c telebot.Context) error {
	menu := &telebot.ReplyMarkup{}
	btnNew := menu.Text("–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")
	btnClose := menu.Text("–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")
	btnHistory := menu.Text("–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")

	menu.Reply(
		menu.Row(btnNew),
		menu.Row(btnClose),
		menu.Row(btnHistory),
	)

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", menu)
}

func handleStart(c telebot.Context) error {
	msg := "üõ†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n" +
		"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö."

	if err := c.Send(msg); err != nil {
		return err
	}
	return showUserMenu(c)
}

func handleHelp(c telebot.Context) error {
	return c.Send(
		"‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n" +
			"1. –ù–∞–∂–º–∏—Ç–µ '–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞\n" +
			"2. –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç —Ç–µ–º—É –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n" +
			"3. –í—Å–µ –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É —Ç–µ–º—É\n" +
			"4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ–º–µ\n\n" +
			"–ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: " + SupportGroupLink,
	)
}

func handleNewTicketButton(c telebot.Context) error {
	user := c.Sender()
	openTicket, err := getOpenUserTicket(user.ID)
	if err != nil && err != sql.ErrNoRows {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: %v", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
	}

	if openTicket != nil {
		if openTicket.Status == "closed" {
			return c.Send("–í–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")
		}
		return c.Send(fmt.Sprintf(
			"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #%d\n\n"+
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–µ–∫—É—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.",
			openTicket.ID))
	}

	return c.Send("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.")
}

func handleCloseTicketButton(c telebot.Context) error {
	user := c.Sender()
	openTicket, err := getOpenUserTicket(user.ID)
	if err != nil {
		if err == sql.ErrNoRows {
			return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
		}
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: %v", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
	}

	if openTicket.Status == "closed" {
		return c.Send("–≠—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ.")
	}

	if err := updateTicketStatus(openTicket.ID, "closed"); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
	}

	text := fmt.Sprintf(
		"‚ö†Ô∏è –û–±—Ä–∞—â–µ–Ω–∏–µ #%d –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n\n"+
			"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @%s\n"+
			"üïí –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: %s",
		openTicket.ID,
		user.Username,
		time.Now().Format("2006-01-02 15:04:05"),
	)

	if _, err := bot.Send(
		telebot.ChatID(SupportGroupID),
		text,
		&telebot.SendOptions{ThreadID: openTicket.ThreadID},
	); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: %v", err)
	}

	return c.Send(fmt.Sprintf("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #%d —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.", openTicket.ID))
}

func handleHistoryCommand(c telebot.Context) error {
	return showTicketHistory(c.Sender().ID, c)
}

func handleMyTicketsButton(c telebot.Context) error {
	return handleMyTickets(c)
}

func handleMyTickets(c telebot.Context) error {
	return showTicketHistory(c.Sender().ID, c)
}

func showTicketHistory(userID int64, c telebot.Context) error {
	tickets, err := getUserTickets(userID, 10)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤: %v", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π")
	}

	if len(tickets) == 0 {
		return c.Send("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
	}

	menu := &telebot.ReplyMarkup{}
	var rows []telebot.Row

	for _, t := range tickets {
		status := "üü¢"
		if t.Status == "closed" {
			status = "üî¥"
		} else if t.Status == "in_progress" {
			status = "üü°"
		}

		btn := menu.Data(
			fmt.Sprintf("#%d %s - %s %s", t.ID, t.Title, status, t.CreatedAt[:10]),
			"ticket_"+strconv.FormatInt(t.ID, 10),
		)
		rows = append(rows, menu.Row(btn))
	}

	btnBack := menu.Data("‚Üê –ù–∞–∑–∞–¥", "back_to_menu")
	rows = append(rows, menu.Row(btnBack))

	menu.Inline(rows...)

	return c.Send("üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:", menu)
}

func handleCallbacks(c telebot.Context) error {
	data := c.Callback().Data

	// –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
	data = strings.TrimLeft(data, "\f")

	switch {
	case strings.HasPrefix(data, "ticket_"):
		ticketID, err := strconv.ParseInt(strings.TrimPrefix(data, "ticket_"), 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID —Ç–∏–∫–µ—Ç–∞: %v", err)
			return c.Respond()
		}
		return showTicketDetails(c, ticketID)
	case data == "back_to_menu":
		return handleBackToMenu(c)
	case data == "back_to_history":
		return handleMyTickets(c)
	}
	return nil
}

func showTicketDetails(c telebot.Context, ticketID int64) error {
	ticket, err := getTicket(ticketID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: %v", err)
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if ticket.UserID != c.Sender().ID {
		return c.Respond(&telebot.CallbackResponse{Text: "–≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"})
	}

	history, err := getTicketHistory(ticketID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"})
	}

	var msg strings.Builder
	msg.WriteString(fmt.Sprintf(
		"üìã –û–±—Ä–∞—â–µ–Ω–∏–µ #%d\n\n"+
			"üìå –¢–µ–º–∞: %s\n"+
			"üïí –°–æ–∑–¥–∞–Ω–æ: %s\n"+
			"üîç –°—Ç–∞—Ç—É—Å: %s\n\n"+
			"--- –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ ---\n\n",
		ticket.ID, ticket.Title, ticket.CreatedAt, getStatusText(ticket.Status),
	))

	for _, m := range history {
		sender := "–í—ã"
		if m.IsSupport {
			sender = fmt.Sprintf("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ (%s)", m.UserName)
		}
		msg.WriteString(fmt.Sprintf(
			"üí¨ %s [%s]:\n%s\n\n",
			sender, m.Date, m.Text,
		))
	}

	menu := &telebot.ReplyMarkup{}
	btnBack := menu.Data("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "back_to_history")
	menu.Inline(menu.Row(btnBack))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	_, err = bot.Send(
		c.Sender(),
		msg.String(),
		&telebot.SendOptions{ReplyMarkup: menu},
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏"})
	}

	return c.Respond()
}

func handleBackToMenu(c telebot.Context) error {
	return showUserMenu(c)
}

func handleTextMessages(c telebot.Context) error {
	if strings.HasPrefix(c.Text(), "/") {
		return nil
	}

	if c.Chat().Type == telebot.ChatPrivate {
		return handleUserMessage(c)
	}

	if c.Chat().ID == SupportGroupID {
		return handleSupportGroupMessage(c)
	}

	return nil
}

func handleUserMessage(c telebot.Context) error {
	user := c.Sender()
	openTicket, err := getOpenUserTicket(user.ID)
	if err != nil && err != sql.ErrNoRows {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: %v", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
	}

	if openTicket == nil {
		return createNewTicket(c)
	}

	if openTicket.Status == "closed" {
		return c.Send("‚ùå –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ. –ù–∞–∂–º–∏—Ç–µ '–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")
	}

	return forwardToExistingTicket(c, openTicket)
}

func createNewTicket(c telebot.Context) error {
	user := c.Sender()
	msg := c.Message()

	ticket := Ticket{
		UserID:    user.ID,
		UserName:  user.Username,
		Title:     fmt.Sprintf("–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç %s", user.FirstName),
		Message:   msg.Text,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Status:    "open",
	}

	ticketID, err := createTicket(ticket)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: %v", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
	}

	if err := sendToSupportGroup(ticketID, ticket, msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: %v", err)
		return c.Send(fmt.Sprintf(
			"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É –≤ –≥—Ä—É–ø–ø–µ.\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: %s",
			SupportGroupLink))
	}

	if err := saveMessageToHistory(ticketID, msg.ID, user.ID, user.Username, msg.Text, false); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: %v", err)
	}

	if err := c.Send(fmt.Sprintf(
		"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #%d —Å–æ–∑–¥–∞–Ω–æ!\n\n"+
			"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç–≤–µ—Ç—è—Ç –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n%s\n\n"+
			"–í—Å–µ –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É —Ç–µ–º—É.",
		ticketID, SupportGroupLink)); err != nil {
		return err
	}

	return showUserMenu(c)
}

func forwardToExistingTicket(c telebot.Context, ticket *Ticket) error {
	user := c.Sender()
	msg := c.Message()

	_, err := db.Exec(
		`UPDATE tickets SET message = ? WHERE id = ?`,
		msg.Text, ticket.ID,
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: %v", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
	}

	if err := saveMessageToHistory(ticket.ID, msg.ID, user.ID, user.Username, msg.Text, false); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: %v", err)
	}

	text := fmt.Sprintf(
		"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é #%d\n\n"+
			"üë§ –û—Ç: %s %s (@%s)\n"+
			"üÜî ID: %d\n\n"+
			"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n%s",
		ticket.ID,
		user.FirstName,
		user.LastName,
		user.Username,
		user.ID,
		msg.Text,
	)

	_, err = bot.Send(
		telebot.ChatID(SupportGroupID),
		text,
		&telebot.SendOptions{ThreadID: ticket.ThreadID},
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É: %v", err)
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
	}

	return c.Send("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é #" + strconv.FormatInt(ticket.ID, 10))
}

func handleSupportGroupMessage(c telebot.Context) error {
	if c.Chat().ID != SupportGroupID || c.Sender().ID == bot.Me.ID || c.Message().ThreadID == 0 || c.Message().IsService() {
		return nil
	}

	var ticketID int64
	err := db.QueryRow(
		`SELECT id FROM tickets WHERE thread_id = ?`,
		c.Message().ThreadID,
	).Scan(&ticketID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–∞: %v", err)
		return nil
	}

	ticket, err := getTicket(ticketID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: %v", err)
		return nil
	}

	if err := saveMessageToHistory(
		ticketID,
		c.Message().ID,
		c.Sender().ID,
		c.Sender().Username,
		c.Message().Text,
		true,
	); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: %v", err)
	}

	replyText := fmt.Sprintf(
		"üì® –û—Ç–≤–µ—Ç –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é #%d:\n\n%s\n\n",
		ticket.ID,
		c.Message().Text,
	)

	if _, err := bot.Send(telebot.ChatID(ticket.UserID), replyText); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}
	return nil
}

func getOpenUserTicket(userID int64) (*Ticket, error) {
	row := db.QueryRow(
		`SELECT id, user_id, user_name, title, message, created_at, status, thread_id 
		FROM tickets 
		WHERE user_id = ? AND status != 'closed'
		ORDER BY id DESC LIMIT 1`,
		userID,
	)

	var t Ticket
	err := row.Scan(&t.ID, &t.UserID, &t.UserName, &t.Title, &t.Message, &t.CreatedAt, &t.Status, &t.ThreadID)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func createTicket(t Ticket) (int64, error) {
	res, err := db.Exec(
		`INSERT INTO tickets (user_id, user_name, title, message, created_at, status)
		VALUES (?, ?, ?, ?, ?, ?)`,
		t.UserID, t.UserName, t.Title, t.Message, t.CreatedAt, t.Status,
	)
	if err != nil {
		return 0, err
	}
	return res.LastInsertId()
}

func sendToSupportGroup(ticketID int64, t Ticket, origMsg *telebot.Message) error {
	text := fmt.Sprintf(
		"üö® –û–±—Ä–∞—â–µ–Ω–∏–µ #%d\n\n"+
			"üë§ –û—Ç: %s %s (@%s)\n"+
			"üÜî ID: %d\n\n"+
			"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n%s\n\n"+
			"üïí –î–∞—Ç–∞: %s\n"+
			"üîó –°—Ç–∞—Ç—É—Å: %s",
		ticketID,
		origMsg.Sender.FirstName,
		origMsg.Sender.LastName,
		t.UserName,
		t.UserID,
		t.Message,
		t.CreatedAt,
		t.Status,
	)

	topicName := fmt.Sprintf("–û–±—Ä–∞—â–µ–Ω–∏–µ #%d: %s", ticketID, t.Title)
	threadID, err := createForumTopic(topicName)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É: %v", err)
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É: %v", err)
	}

	if threadID != 0 {
		_, err = db.Exec(
			`UPDATE tickets SET thread_id = ? WHERE id = ?`,
			threadID, ticketID,
		)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è thread_id: %v", err)
		}
	}

	btnTake := telebot.Btn{Unique: fmt.Sprintf("take_btn_%d", ticketID), Text: "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ"}
	btnClose := telebot.Btn{Unique: fmt.Sprintf("close_btn_%d", ticketID), Text: "‚ùå –ó–∞–∫—Ä—ã—Ç–æ"}

	markup := &telebot.ReplyMarkup{}
	markup.Inline(markup.Row(btnTake, btnClose))

	bot.Handle(&btnTake, func(c telebot.Context) error {
		return handleTakeButton(c, ticketID)
	})
	bot.Handle(&btnClose, func(c telebot.Context) error {
		return handleCloseButton(c, ticketID)
	})

	_, err = bot.Send(
		telebot.ChatID(SupportGroupID),
		text,
		&telebot.SendOptions{
			ReplyMarkup: markup,
			ThreadID:    threadID,
		},
	)
	return err
}

func handleTakeButton(c telebot.Context, ticketID int64) error {
	if err := updateTicketStatus(ticketID, "in_progress"); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		return c.Respond()
	}

	ticket, err := getTicket(ticketID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: %v", err)
		return c.Respond()
	}

	_, err = bot.Send(
		telebot.ChatID(ticket.UserID),
		fmt.Sprintf("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #%d –ø—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É!", ticketID),
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %v", err)
	}

	btnClose := telebot.Btn{Unique: fmt.Sprintf("close_btn_%d", ticketID), Text: "‚ùå –ó–∞–∫—Ä—ã—Ç–æ"}
	markup := &telebot.ReplyMarkup{}
	markup.Inline(markup.Row(btnClose))

	editedText := strings.Replace(
		c.Message().Text,
		"üîó –°—Ç–∞—Ç—É—Å: open",
		"üîó –°—Ç–∞—Ç—É—Å: in_progress",
		1,
	)

	_, err = bot.Edit(
		c.Message(),
		editedText,
		&telebot.SendOptions{ReplyMarkup: markup},
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	return c.Respond(&telebot.CallbackResponse{Text: "–û–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É"})
}

func handleCloseButton(c telebot.Context, ticketID int64) error {
	if err := updateTicketStatus(ticketID, "closed"); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		return c.Respond()
	}

	ticket, err := getTicket(ticketID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: %v", err)
		return c.Respond()
	}

	_, err = bot.Send(
		telebot.ChatID(ticket.UserID),
		fmt.Sprintf("‚úîÔ∏è –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #%d –∑–∞–∫—Ä—ã—Ç–æ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º!", ticketID),
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %v", err)
	}

	editedText := strings.Replace(
		c.Message().Text,
		fmt.Sprintf("üîó –°—Ç–∞—Ç—É—Å: %s", ticket.Status),
		"üîó –°—Ç–∞—Ç—É—Å: closed",
		1,
	)

	_, err = bot.Edit(c.Message(), editedText)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	return c.Respond(&telebot.CallbackResponse{Text: "–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ"})
}

func createForumTopic(name string) (int, error) {
	params := map[string]interface{}{
		"chat_id": SupportGroupID,
		"name":    name,
	}

	resp, err := bot.Raw("createForumTopic", params)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ API: %v", err)
	}

	var result struct {
		Ok     bool `json:"ok"`
		Result struct {
			MessageThreadID int `json:"message_thread_id"`
		} `json:"result"`
	}

	if err := json.Unmarshal(resp, &result); err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if !result.Ok {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ Telegram API")
	}

	return result.Result.MessageThreadID, nil
}

func getUserTickets(userID int64, limit int) ([]Ticket, error) {
	rows, err := db.Query(
		`SELECT id, title, status, created_at FROM tickets
		WHERE user_id = ? ORDER BY created_at DESC LIMIT ?`,
		userID,
		limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var tickets []Ticket
	for rows.Next() {
		var t Ticket
		if err := rows.Scan(&t.ID, &t.Title, &t.Status, &t.CreatedAt); err != nil {
			return nil, err
		}
		tickets = append(tickets, t)
	}
	return tickets, nil
}

func getTicket(id int64) (*Ticket, error) {
	row := db.QueryRow(
		`SELECT id, user_id, user_name, title, message, created_at, status, thread_id 
		FROM tickets WHERE id = ?`,
		id,
	)

	var t Ticket
	err := row.Scan(&t.ID, &t.UserID, &t.UserName, &t.Title, &t.Message, &t.CreatedAt, &t.Status, &t.ThreadID)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func updateTicketStatus(id int64, status string) error {
	_, err := db.Exec(
		`UPDATE tickets SET status = ? WHERE id = ?`,
		status, id,
	)
	return err
}

func saveMessageToHistory(ticketID int64, messageID int, userID int64, userName, text string, isSupport bool) error {
	_, err := db.Exec(
		`INSERT INTO ticket_messages 
		(ticket_id, message_id, user_id, user_name, text, date, is_support)
		VALUES (?, ?, ?, ?, ?, ?, ?)`,
		ticketID, messageID, userID, userName, text, time.Now().Format("2006-01-02 15:04:05"), isSupport,
	)
	return err
}

func getTicketHistory(ticketID int64) ([]TicketMessage, error) {
	rows, err := db.Query(
		`SELECT user_name, text, date, is_support 
		FROM ticket_messages 
		WHERE ticket_id = ? 
		ORDER BY date ASC`,
		ticketID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var history []TicketMessage
	for rows.Next() {
		var m TicketMessage
		err := rows.Scan(&m.UserName, &m.Text, &m.Date, &m.IsSupport)
		if err != nil {
			return nil, err
		}
		history = append(history, m)
	}
	return history, nil
}

func getStatusText(status string) string {
	switch status {
	case "open":
		return "üü¢ –û—Ç–∫—Ä—ã—Ç–æ"
	case "in_progress":
		return "üü° –í —Ä–∞–±–æ—Ç–µ"
	case "closed":
		return "üî¥ –ó–∞–∫—Ä—ã—Ç–æ"
	default:
		return status
	}
}
